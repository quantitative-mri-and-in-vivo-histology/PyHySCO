window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "EPI_MRI", "modulename": "EPI_MRI", "kind": "module", "doc": "<p>Classes to define the optimization problem for EPI MRI Distortion Correction.</p>\n\n<p>Files:</p>\n\n<ul>\n<li><code>EPIMRIDistortionCorrection</code>: The EPI-MRI distortion correction problem, including image models and regularization.</li>\n<li><code>ImageModels</code>: Image modeling (interpolation) functionality for EPI-MRI images.</li>\n<li><code>InitializationMethods</code>: Different initialization methods used in optimization.</li>\n<li><code>LeastSquaresCorrection</code>: A class performing least squares distortion correction.</li>\n<li><code>LinearOperators</code>: Linear operators used in optimization.</li>\n<li><code>Preconditioners</code>: Preconditioning techniques.</li>\n<li><code>Regularizers</code>: Different regularization techniques.</li>\n<li><code>utils</code>: Various useful stand-alone methods.</li>\n</ul>\n"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.EPIMRIDistortionCorrection", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "EPIMRIDistortionCorrection", "kind": "class", "doc": "<p>Objective function and Jacobian correction for EPI-MRI.</p>\n\n<p>Defines and implements a distortion correction model and optimization problem for\nEcho-Planar MRI susceptibility artifact distortion correction.</p>\n\n<p>Find b that minimizes:</p>\n\n<p>J(b) = D(I1(b), I2(b)) + alpha S(b) + beta P(b) + rho Q(b)</p>\n\n<ul>\n<li><p>D gives distance between corrected images I1(b) and I2(b)</p></li>\n<li><p>S penalizes non-smooth field maps</p></li>\n<li><p>P penalizes field maps violating intensity modulation constraint</p></li>\n<li><p>Q is a proximal term used on some optimization schemes</p></li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_obj</strong> (<code>DataObject</code>):\nobject containing interpolation models for input images along with domain size and details</li>\n<li><strong>alpha</strong> (float):\nregularization parameter for the smoothness regularizer</li>\n<li><strong>beta</strong> (float):\nregularization parameter for the intensity regularizer</li>\n<li><strong>averaging_operator</strong> (Class (subclass of <code>LinearOperators.LinearOperator</code>), optional):\nclass to use for the averaging operator (default is <code>LinearOperators.myAvg1D</code>)</li>\n<li><strong>derivative_operator</strong> (Class (subclass of <code>LinearOperators.LinearOperator</code>), optional):\nclass to use for the derivative operator (default is <code>LinearOperators.myDiff1D</code>)</li>\n<li><strong>regularizer</strong> (Class (subclass of <code>.LinearOperators.LinearOperator</code>), optional):\nclass to use for the regularizer (default is <code>LinearOperators.myLaplacian3D</code>)</li>\n<li><strong>rho</strong> (float, optional):\naugmentation parameter for proximal term (default is 0.0)</li>\n<li><strong>initialization</strong> (Class (subclass of <code>InitializationMethods.InitializationMethod</code>), optional):\nclass to use for the initialization of the field map (default is <code>InitializationMethods.InitializeOT</code>)</li>\n<li><strong>PC</strong> (Class (subclass of <code>Preconditioners.Preconditioner</code>), optional):\npreconditioner (default is <code>Preconditioners.JacobiCG</code>)</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dataObj</strong> (<code>DataObject</code>):\nobject containing interpolation models for input images along with domain size and details</li>\n<li><strong>A</strong> (<code>LinearOperators.LinearOperator</code>):\naveraging operator</li>\n<li><strong>D</strong> (<code>LinearOperators.LinearOperator</code>):\npartial derivative operator in the phase encoding dimension</li>\n<li><strong>xc</strong> (torch.Tensor (size prod(m))):\ncell-centered grid in the phase encoding dimension</li>\n<li><strong>S</strong> (<code>Regularizers.QuadRegularizer</code>):\ndefines the smoothness regularizer</li>\n<li><strong>Q</strong> (<code>Regularizers.TikRegularizer</code>):\ndefines the proximal term, if used</li>\n<li><strong>PC</strong> (<code>Preconditioners.Preconditioner</code>):\npreconditioner object, if used</li>\n<li><strong>initialization</strong> (<code>InitializationMethods.InitializationMethod</code>):\ninitialization object</li>\n<li><strong>alpha</strong> (float):\nregularization parameter for the smoothness regularizer</li>\n<li><strong>beta</strong> (float):\nregularization parameter for the intensity regularizer</li>\n<li><strong>rho</strong> (float):\nparameter for the proximal term augmentation parameter, if used</li>\n<li><strong>device</strong> (string):\ndevice on which to compute operations</li>\n<li><strong>dtype</strong> (torch.dtype):\ndata type for all data tensors</li>\n<li><strong>Dc</strong> (float):\nmost recent data fit term value</li>\n<li><strong>Sc</strong> (float):\nmost recent smoothness regularization term value</li>\n<li><strong>Pc</strong> (float):\nmost recent intensity regularization term value</li>\n<li><strong>Qc</strong> (float):\nmost recent proximal term value, if used</li>\n<li><strong>corr1</strong> (torch.Tensor (size m)):\nmost recent corrected image from dataObj.I1</li>\n<li><strong>corr2</strong> (torch.Tensor (size m)):\nmost recent corrected image from dataObj.I2</li>\n</ul>\n"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.EPIMRIDistortionCorrection.__init__", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "EPIMRIDistortionCorrection.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_obj</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">averaging_operator</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">myAvg1D</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">derivative_operator</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">myDiff1D</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">regularizer</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">myLaplacian3D</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\tinitialization=&lt;class &#x27;EPI_MRI.InitializationMethods.InitializeOT&#x27;&gt;,</span><span class=\"param\">\tPC=&lt;class &#x27;EPI_MRI.Preconditioners.JacobiCG&#x27;&gt;</span>)</span>"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.EPIMRIDistortionCorrection.eval", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "EPIMRIDistortionCorrection.eval", "kind": "function", "doc": "<p>Evaluates the objective function given the field map yc.</p>\n\n<p>J(yc) = D(I1(yc),I2(yc)) + alpha S(yc) + beta P(yc) + rho Q(yc, yref)</p>\n\n<p>If do_derivative is True, returns the gradient as well.</p>\n\n<p>If calc_hessian is True, returns the Hessian and PC as well.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>yc</strong> (torch.Tensor (size m_plus(m))):\na field inhomogeneity map</li>\n<li><strong>yref</strong> (torch.Tensor (size m_plus(m)), optional):\nreference image used in proximal term, default is None</li>\n<li><strong>do_derivative</strong> (boolean, optional):\nflag to compute and return the gradient, default is False</li>\n<li><strong>calc_hessian</strong> (boolean, optional):\nflag to construct and return Hessian mat-vec, default is False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>J(yc)</strong> (torch.Tensor (size 1)):\nobjective function value</li>\n<li><strong>dJ(yc)</strong> (torch.Tensor (size m_plus(m))):\ngradient of the objective function, only returned when do_derivative=True</li>\n<li><strong>H</strong> (Callable):\ncallable matrix-vector product with (approximate) Hessian, only returned when calc_hessian=True</li>\n<li><strong>PC</strong> (Callable):\ncallable solver to apply preconditioner, only returned when calc_hessian=True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">yc</span>, </span><span class=\"param\"><span class=\"n\">yref</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_derivative</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">calc_hessian</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.EPIMRIDistortionCorrection.mp_transform", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "EPIMRIDistortionCorrection.mp_transform", "kind": "function", "doc": "<p>Applies the distortion correction model.</p>\n\n<p>TI(xc) = I(xc + bc) * (1 + dbc)</p>\n\n<p>If do_derivative is True, computes gradient information as well.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>I</strong> (ImageModels.ImageModel):\ninterpolating image model</li>\n<li><strong>b</strong> (torch.Tensor (size m_plus(m))):\na field inhomogeneity map</li>\n<li><strong>do_derivative</strong> (boolean, optional):\nflag to compute and return the gradient, default is False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>TI</strong> (torch.Tensor (size m)):\nresult of applying the correction model to image I using the field map b</li>\n<li><strong>Jac</strong> (torch.Tensor (size m)):\nmass preserving factor 1 + dbc</li>\n<li><strong>FI</strong> (torch.Tensor (size m)):\nresult of I interpolated on xc + bc</li>\n<li><strong>dFI</strong> (torch.Tensor (size m)):\nderivative of applying image model interpolation, None when do_derivative=False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">I</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">do_derivative</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.EPIMRIDistortionCorrection.phi_EPI", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "EPIMRIDistortionCorrection.phi_EPI", "kind": "function", "doc": "<p>Barrier function for the intensity regularization term, applied element-wise.</p>\n\n<p>phi(x) = -x^4 / ((x^2 - 1))</p>\n\n<p>phi satisfies these important conditions:</p>\n\n<pre><code>    * phi(x) &gt; 0, for all x\n\n    * phi(|x| -&gt; 1) -&gt; infinity\n\n    * phi(0) = 0\n\n    * phi is convex\n\n    * phi(x) = phi(-x)\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor (size m)):\npartial derivative of the field map</li>\n<li><strong>do_derivative</strong> (boolean, optional):\nflag to compute the first derivative (default is False)</li>\n<li><strong>calc_hessian</strong> (boolean, optional):\nflag to compute the second derivative (default is False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>G</strong> (torch.Tensor (size m)):\nfunction value</li>\n<li><strong>dG</strong> (torch.Tensor (size m)):\nfirst derivative of the function, None if do_derivative=False</li>\n<li><strong>d2G</strong> (torch.Tensor (size m)):\nsecond derivative of the function, None if calc_hessian=False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">do_derivative</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">calc_hessian</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.EPIMRIDistortionCorrection.initialize", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "EPIMRIDistortionCorrection.initialize", "kind": "function", "doc": "<p>Calls the initialization scheme.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args, kwargs</strong> (Any):\narguments and keyword arguments as needed for the initialization scheme</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size m_plus(m))):\ninitial guess for the field map</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.EPIMRIDistortionCorrection.distance", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "EPIMRIDistortionCorrection.distance", "kind": "function", "doc": "<p>Computes the sum of squared difference metric and derivatives for two images.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Tc</strong> (torch.Tensor (size m)):\nfirst image</li>\n<li><strong>Rc</strong> (torch.Tensor (size m)):\nsecond image</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dc</strong> (torch.Tensor (size 1)):\ndistance value = 1/2 * hd * rc.T * rc</li>\n<li><strong>dD</strong> (torch.Tensor (size m)):\ndistance derivative = hd * dr</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Tc</span>, </span><span class=\"param\"><span class=\"n\">Rc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.DataObject", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "DataObject", "kind": "class", "doc": "<p>Defines an object to store input images, interpolation models, and domain information.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>I1</strong> (ImageModels.ImageModel):\ninterpolating image model for the first input image; has the opposite phase encoding direction as I2</li>\n<li><strong>I2</strong> (ImageModels.ImageModel):\ninterpolating image model for the second input image; has the opposite phase encoding direction as I1</li>\n<li><strong>omega</strong> (torch.Tensor (size # of dimensions x 2)):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\ndiscretization size</li>\n<li><strong>h</strong> (torch.Tensor (size # of dimensions)):\ncell size</li>\n<li><strong>p</strong> (list (size # of dimensions)):\norder to permute dimensions to return the image to input orientation</li>\n<li><strong>im1</strong> (torch.Tensor):\noriginal image 1 without normalization</li>\n<li><strong>im2</strong> (torch.Tensor):\noriginal image 2 without normalization</li>\n<li><strong>device</strong> (string):\ndevice on which to compute operations</li>\n<li><strong>dtype</strong> (torch.dtype):\ndata type for all data tensors</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img1</strong> (str):\nfile path of [first] input image or stacked images if in the same file</li>\n<li><strong>img2</strong> (str, optional):\nfile path of the second input image if images are separate files (default is None)</li>\n<li><strong>phase_encoding_direction</strong> (int, optional):\ngives which dimension of img1 and img2 is the phase encoding dimension (i.e. 1 for the first, 2 for the second, etc.) (default is 1)</li>\n<li><strong>image_model</strong> (Class (subclass of ImagesModels.ImageModel), optional):\nclass to use for the image interpolation model (default is ImageModels.Interp1D)</li>\n<li><strong>do_normalize</strong> (boolean, optional):\nflag to normalize image intensities (default is True)</li>\n<li><strong>device</strong> (string, optional):\ndevice on which to compute operations (default is 'cpu')</li>\n<li><strong>dtype</strong> (torch.dtype, optional):\ndata type for all data tensors (default is torch.float64)</li>\n</ul>\n"}, {"fullname": "EPI_MRI.EPIMRIDistortionCorrection.DataObject.__init__", "modulename": "EPI_MRI.EPIMRIDistortionCorrection", "qualname": "DataObject.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img1</span>,</span><span class=\"param\">\t<span class=\"n\">img2</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">phase_encoding_direction</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\timage_model=&lt;class &#x27;EPI_MRI.ImageModels.Interp1D&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">do_normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "EPI_MRI.ImageModels", "modulename": "EPI_MRI.ImageModels", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "EPI_MRI.ImageModels.ImageModel", "modulename": "EPI_MRI.ImageModels", "qualname": "ImageModel", "kind": "class", "doc": "<p>Defines the structure of an image model object used to offer interpolation on an image.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>data</strong> (torch.Tensor (size m)):\nOriginal image data.</li>\n<li><strong>omega</strong> (torch.Tensor (size # of dimensions x 2)):\nImage domain.</li>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\nDiscretization size.</li>\n<li><strong>h</strong> (torch.Tensor (size # of dimensions)):\nCell size.</li>\n<li><strong>device</strong> (str):\nDevice on which to compute operations.</li>\n<li><strong>dtype</strong> (torch.dtype):\nData type for all data tensors.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (torch.Tensor (size m)):\nOriginal image data.</li>\n<li><strong>omega</strong> (torch.Tensor (size # of dimensions x 2)):\nImage domain.</li>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\nDiscretization size.</li>\n<li><strong>device</strong> (str, optional):\nDevice on which to compute operations (default is 'cpu').</li>\n<li><strong>dtype</strong> (torch.dtype, optional):\nData type for all data tensors (default is torch.float64).</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "EPI_MRI.ImageModels.ImageModel.eval", "modulename": "EPI_MRI.ImageModels", "qualname": "ImageModel.eval", "kind": "function", "doc": "<p>Evaluates the image interpolation on distorted grid x; moves data only in the distortion dimension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor (size m)):\nPoints on which to interpolate.</li>\n<li><strong>do_derivative</strong> (bool, optional):\nFlag to calculate and return the derivative of interpolation (default is False).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tc</strong> (torch.Tensor (size m)):\nImage interpolated on points x.</li>\n<li><strong>dT</strong> (torch.Tensor (size m)):\nDerivative of interpolation, only returned when do_derivative=True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">do_derivative</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.ImageModels.Interp1D", "modulename": "EPI_MRI.ImageModels", "qualname": "Interp1D", "kind": "class", "doc": "<p>Defines a model to efficiently interpolate an image at different points.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>data</strong> (torch.Tensor (size m)):\nOriginal image data.</li>\n<li><strong>omega</strong> (torch.Tensor (size # of dimensions x 2)):\nImage domain.</li>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\nDiscretization size.</li>\n<li><strong>h</strong> (torch.Tensor (size # of dimensions)):\nCell size.</li>\n<li><strong>device</strong> (str):\nDevice on which to compute operations.</li>\n<li><strong>dtype</strong> (torch.dtype):\nData type for all data tensors.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (torch.Tensor (size m)):\nOriginal image data.</li>\n<li><strong>omega</strong> (torch.Tensor (size # of dimensions x 2)):\nImage domain.</li>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\nDiscretization size.</li>\n<li><strong>device</strong> (str, optional):\nDevice on which to compute operations (default is 'cpu').</li>\n<li><strong>dtype</strong> (torch.dtype, optional):\nData type for all data tensors (default is torch.float64).</li>\n</ul>\n", "bases": "ImageModel"}, {"fullname": "EPI_MRI.ImageModels.Interp1D.__init__", "modulename": "EPI_MRI.ImageModels", "qualname": "Interp1D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "EPI_MRI.ImageModels.Interp1D.eval", "modulename": "EPI_MRI.ImageModels", "qualname": "Interp1D.eval", "kind": "function", "doc": "<p>Evaluates interpolation of data on points x; only in the distortion dimension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor (size m)):\nPoints on which to interpolate.</li>\n<li><strong>do_derivative</strong> (bool, optional):\nFlag to calculate and return the derivative of interpolation (default is False).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tc</strong> (torch.Tensor (size m)):\nImage interpolated on points x.</li>\n<li><strong>dT</strong> (torch.Tensor (size m)):\nDerivative of interpolation, only returned when do_derivative=True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">do_derivative</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.InitializationMethods", "modulename": "EPI_MRI.InitializationMethods", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "EPI_MRI.InitializationMethods.InitializationMethod", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializationMethod", "kind": "class", "doc": "<p>Defines initialization method to be used to initialize field map estimate.</p>\n\n<p>All children must implement an initialization evaluation method.</p>\n", "bases": "abc.ABC"}, {"fullname": "EPI_MRI.InitializationMethods.InitializationMethod.eval", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializationMethod.eval", "kind": "function", "doc": "<p>Evaluates initialization.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nOriginal image data.</li>\n<li><strong>args, kwargs</strong> (Any):\nParticular arguments and keyword arguments for initialization method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size m_plus(m))):\nInitial guess for field map.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeOT", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeOT", "kind": "class", "doc": "<p>Defines parallelized one-dimensional optimal transport based initialization scheme.</p>\n", "bases": "InitializationMethod"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeOT.eval", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeOT.eval", "kind": "function", "doc": "<p>Call initialization.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nOriginal image data.</li>\n<li><strong>blur_result</strong> (boolean, optional):\nFlag to apply Gaussian blur to <code>init_OT</code> result before returning (default is True).</li>\n<li><strong>args, kwargs</strong> (Any):\nProvided shift, if given (see method <code>init_OT</code>).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size m_plus(m))):\nInitial field map.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">blur_result</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeOT.init_OT", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeOT.init_OT", "kind": "function", "doc": "<p>Optimal Transport based initialization scheme.</p>\n\n<p>Performs parallel 1-D optimal transport in distortion dimension to estimate field map.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nOriginal image data.</li>\n<li><strong>shift</strong> (float, optional):\nNumeric shift to ensure smoothness of positive measure.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Bc</strong> (torch.Tensor (size m_plus(m))):\nInitial guess for field inhomogeneity map.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">shift</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeOT.blur", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeOT.blur", "kind": "function", "doc": "<p>Performs Gaussian blur to pre-smooth initial field map.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong> (torch.Tensor (size m_plus(m))):\nField map from <code>init_OT</code>.</li>\n<li><strong>omega</strong> (torch.Tensor):\nImage domain.</li>\n<li><strong>m</strong> (torch.Tensor):\nImage size.</li>\n<li><strong>alpha</strong> (float, optional):\nStandard deviation of Gaussian kernel (default is 1.0).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Bc</strong> (torch.Tensor (size m_plus(m))):\nInitial guess for field inhomogeneity map with blur.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeRandom", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeRandom", "kind": "class", "doc": "<p>Defines random initialization scheme.</p>\n", "bases": "InitializationMethod"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeRandom.eval", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeRandom.eval", "kind": "function", "doc": "<p>Call initialization.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nOriginal image data.</li>\n<li><strong>args, kwargs</strong> (Any):\nProvided seed, if given (see <code>rand_init</code>).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size (m_plus(m),1))):\nInitial field map.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeRandom.rand_init", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeRandom.rand_init", "kind": "function", "doc": "<p>Random initialization scheme.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nOriginal image data.</li>\n<li><strong>seed</strong> (int, optional):\nSeed for torch.random (for reproducibility) (default is None).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Bc</strong> (torch.Tensor (size m_plus(m))):\nInitial guess for field inhomogeneity map.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeZeros", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeZeros", "kind": "class", "doc": "<p>Defines zero initialization scheme.</p>\n", "bases": "InitializationMethod"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeZeros.eval", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeZeros.eval", "kind": "function", "doc": "<p>Call initialization.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nOriginal image data.</li>\n<li><strong>args, kwargs</strong> (Any):\nNone for this initialization scheme.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size m_plus(m))):\nInitial field map.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.InitializationMethods.InitializeZeros.zero_init", "modulename": "EPI_MRI.InitializationMethods", "qualname": "InitializeZeros.zero_init", "kind": "function", "doc": "<p>Zeros initialization scheme.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nOriginal image data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Bc</strong> (torch.Tensor (size m_plus(m))):\nInitial guess for field inhomogeneity map.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LeastSquaresCorrection", "modulename": "EPI_MRI.LeastSquaresCorrection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "EPI_MRI.LeastSquaresCorrection.LeastSquaresCorrection", "modulename": "EPI_MRI.LeastSquaresCorrection", "qualname": "LeastSquaresCorrection", "kind": "class", "doc": "<p>Given a field map, produces a corrected image.</p>\n\n<p>This class provides functionality to correct distorted images using a field map.\nThe method is based on Least Squares Restoration.</p>\n\n<p>Reference: <a href=\"https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/topup/ApplytopupFurtherInformation\">https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/topup/ApplytopupFurtherInformation</a></p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dataObj</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nContains original (distorted) data as a DataObject.</li>\n<li><strong>A</strong> (<code>LinearOperators.LinearOperator</code>):\nAveraging operator used for image averaging, e.g. <code>LinearOperators.myAvg1D</code>.</li>\n<li><strong>device</strong> (str):\nThe device on which to compute operations, e.g., 'cpu' or 'cuda'.</li>\n<li><strong>xc</strong> (torch.Tensor (size m)):\nCell-centered grid in the phase encoding dimension.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nContains the original (distorted) data as a DataObject.</li>\n<li><strong>A</strong> (<code>LinearOperators.LinearOperator</code>):\nThe averaging operator to be used for image averaging, e.g. <code>LinearOperators.myAvg1D</code>.</li>\n</ul>\n"}, {"fullname": "EPI_MRI.LeastSquaresCorrection.LeastSquaresCorrection.__init__", "modulename": "EPI_MRI.LeastSquaresCorrection", "qualname": "LeastSquaresCorrection.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">A</span></span>)</span>"}, {"fullname": "EPI_MRI.LeastSquaresCorrection.LeastSquaresCorrection.apply_correction", "modulename": "EPI_MRI.LeastSquaresCorrection", "qualname": "LeastSquaresCorrection.apply_correction", "kind": "function", "doc": "<p>Solves the least squares problem and returns the corrected image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>yc</strong> (torch.Tensor (size m_plus(m))):\nA field inhomogeneity map.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>rhocorr</strong> (torch.Tensor (size m)):\nThe corrected image.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">yc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LeastSquaresCorrection.LeastSquaresCorrection.get_push_forward_parallel", "modulename": "EPI_MRI.LeastSquaresCorrection", "qualname": "LeastSquaresCorrection.get_push_forward_parallel", "kind": "function", "doc": "<p>Constructs the push forward matrix for distortion correction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor (size 2*dim)):\nThe image domain.</li>\n<li><strong>mc</strong> (int):\nThe size of the distortion dimension.</li>\n<li><strong>mf</strong> (int):\nThe size of the non-distortion dimensions.</li>\n<li><strong>xp</strong> (torch.tensor (size (-1, m[-1]))):\nThe distorted grid.</li>\n<li><strong>h</strong> (float):\nThe cell-size in the distortion dimension.</li>\n<li><strong>hp</strong> (float):\nThe cell-size in the distortion dimension.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>T</strong> (torch.Tensor (size mf, mc, xp.shape[1])):\nThe push forward matrix.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">mc</span>, </span><span class=\"param\"><span class=\"n\">mf</span>, </span><span class=\"param\"><span class=\"n\">xp</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">hp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LeastSquaresCorrection.LeastSquaresCorrection.int1D_parallel", "modulename": "EPI_MRI.LeastSquaresCorrection", "qualname": "LeastSquaresCorrection.int1D_parallel", "kind": "function", "doc": "<p>One-dimensional interpolation for distortion correction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (torch.Tensor):\nInput data.</li>\n<li><strong>pwidth</strong> (int):\nUpper bound for the support of basis functions.</li>\n<li><strong>eps</strong> (float):\nParticle width.</li>\n<li><strong>h</strong> (float):\nCell-size in the distortion dimension.</li>\n<li><strong>hp</strong> (float):\nCell-size in the distortion dimension.</li>\n<li><strong>n_parallel</strong> (int):\nSize of the non-distortion dimensions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Bij</strong> (torch.Tensor):\nInterpolated data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">pwidth</span>, </span><span class=\"param\"><span class=\"n\">eps</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">hp</span>, </span><span class=\"param\"><span class=\"n\">n_parallel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LeastSquaresCorrection.LeastSquaresCorrection.B_parallel", "modulename": "EPI_MRI.LeastSquaresCorrection", "qualname": "LeastSquaresCorrection.B_parallel", "kind": "function", "doc": "<p>Indexing and combination for one-dimensional interpolation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput data</li>\n<li><strong>eps</strong> (float):\nparticle width</li>\n<li><strong>h</strong> (float):\ncell-size in distortion dimension</li>\n<li><strong>n_parallel</strong> (int):\nsize of non-distortion dimensions</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Bij</strong> (torch.Tensor):\ninterpolated data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">eps</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">n_parallel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators", "modulename": "EPI_MRI.LinearOperators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "EPI_MRI.LinearOperators.LinearOperator", "modulename": "EPI_MRI.LinearOperators", "qualname": "LinearOperator", "kind": "class", "doc": "<p>Abstract class to define operations of LinearOperator subclasses. A LinearOperator object must define methods for\nmultiplication and transpose multiplication.</p>\n", "bases": "abc.ABC"}, {"fullname": "EPI_MRI.LinearOperators.LinearOperator.mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "LinearOperator.mat_mul", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.LinearOperator.transp_mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "LinearOperator.transp_mat_mul", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Conv1D", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv1D", "kind": "class", "doc": "<p>Defines a one-dimensional convolution, batched over the last dimension.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>kernel</strong> (torch.Tensor):\nconvolution kernel</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>padding</strong> (int):\nsize of padding to use in convolution</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kernel</strong> (torch.Tensor):\nconvolution kernel; first two dimension should be of size 1</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>padding</strong> (int, optional):\nsize of padding to use in convolution (default is 0)</li>\n</ul>\n", "bases": "LinearOperator"}, {"fullname": "EPI_MRI.LinearOperators.Conv1D.__init__", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv1D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kernel</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "EPI_MRI.LinearOperators.Conv1D.mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv1D.mat_mul", "kind": "function", "doc": "<p>Performs 1D convolution using kernel on input x, batched in last dimension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor (shape m_plus(m))):\ninput tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Ax</strong> (torch.Tensor):\nresult of convolution (shape m)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Conv1D.transp_mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv1D.transp_mat_mul", "kind": "function", "doc": "<p>Performs 1D transpose convolution using kernel on input x, batched in last dimension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Atx</strong> (torch.Tensor):\nresult of convolution</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Conv1D.op_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv1D.op_mul", "kind": "function", "doc": "<p>Performs operator multiplication between this convolution operator and another 1D convolution operator.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>B</strong> (<code>Conv1D</code>):\nsecond convolution operator</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>AB</strong> (<code>Conv1D</code>):\nobject representing operation that is the result of operator multiplication</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Conv1D.diag", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv1D.diag", "kind": "function", "doc": "<p>Returns diagonal of this operator as a matrix.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>D</strong> (torch.Tensor):\ndiagonal of this operator</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.FFT3D", "modulename": "EPI_MRI.LinearOperators", "qualname": "FFT3D", "kind": "class", "doc": "<p>Defines a three-dimensional convolution, implemented using the diagonalization K = Q^H D Q,\nwhere Q is a discrete Fourier transform matrix with periodic boundary conditions, and D is diagonal with\nthe eigenvalues of K as its elements.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>kernel</strong> (torch.Tensor):\nconvolution kernel</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>eig</strong> (torch.Tensor):\neigenvalues of kernel</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kernel</strong> (torch.Tensor):\nconvolution kernel</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n</ul>\n", "bases": "LinearOperator"}, {"fullname": "EPI_MRI.LinearOperators.FFT3D.__init__", "modulename": "EPI_MRI.LinearOperators", "qualname": "FFT3D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kernel</span>, </span><span class=\"param\"><span class=\"n\">m</span></span>)</span>"}, {"fullname": "EPI_MRI.LinearOperators.FFT3D.compute_eigs", "modulename": "EPI_MRI.LinearOperators", "qualname": "FFT3D.compute_eigs", "kind": "function", "doc": "<p>Computes the eigenvalues of self.kernel</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>eig</strong> (torch.Tensor):\neigenvalues of self.kernel in fourier space</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.FFT3D.mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "FFT3D.mat_mul", "kind": "function", "doc": "<p>Performs 3D convolution using kernel on input x.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Lx</strong> (torch.Tensor):\nresult of convolution</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.FFT3D.transp_mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "FFT3D.transp_mat_mul", "kind": "function", "doc": "<p>Performs 3D transpose convolution using kernel on input x.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Lx</strong> (torch.Tensor):\nresult of transpose convolution</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.FFT3D.inv", "modulename": "EPI_MRI.LinearOperators", "qualname": "FFT3D.inv", "kind": "function", "doc": "<p>Applies inverse of self.kernel to input z, scaled by rho.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>z</strong> (torch.Tensor):\ninput tensor</li>\n<li><strong>rho</strong> (float):\nscaling variable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Liz</strong> (torch.Tensor):\nresult of inverse</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">rho</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.FFT3D.diag", "modulename": "EPI_MRI.LinearOperators", "qualname": "FFT3D.diag", "kind": "function", "doc": "<p>Returns diagonal of this operator as a matrix.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>D</strong> (torch.Tensor):\ndiagonal of this operator</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Conv3D", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv3D", "kind": "class", "doc": "<p>Defines a three-dimensional convolution.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>kernel</strong> (torch.Tensor):\nconvolution kernel</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>padding</strong> (int):\nsize of padding to use in convolution</li>\n<li><strong>shape</strong> (list):\nshape input tensor should be before applying convolution</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kernel</strong> (torch.Tensor):\nconvolution kernel; first two dimension should be of size 1</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>padding</strong> (list, optional):\nsize of padding to use in convolution (default is [1, 1, 1])</li>\n</ul>\n", "bases": "LinearOperator"}, {"fullname": "EPI_MRI.LinearOperators.Conv3D.__init__", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv3D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kernel</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "EPI_MRI.LinearOperators.Conv3D.mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv3D.mat_mul", "kind": "function", "doc": "<p>Performs 3D convolution using kernel on input x.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Lx</strong> (torch.Tensor):\nresult of convolution</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Conv3D.transp_mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv3D.transp_mat_mul", "kind": "function", "doc": "<p>Performs 3D transpose convolution using kernel on input x.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Ltx</strong> (torch.Tensor):\nresult of transpose convolution</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Conv3D.diag", "modulename": "EPI_MRI.LinearOperators", "qualname": "Conv3D.diag", "kind": "function", "doc": "<p>Returns diagonal of this operator as a matrix.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>D</strong> (torch.Tensor):\ndiagonal of this operator</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Identity", "modulename": "EPI_MRI.LinearOperators", "qualname": "Identity", "kind": "class", "doc": "<p>Identity operator.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>rho</strong> (float):\nscalar multiplier</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rho</strong> (float, optional):\nscalar multiplier (default is 1.0)</li>\n</ul>\n", "bases": "LinearOperator"}, {"fullname": "EPI_MRI.LinearOperators.Identity.__init__", "modulename": "EPI_MRI.LinearOperators", "qualname": "Identity.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rho</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "EPI_MRI.LinearOperators.Identity.mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "Identity.mat_mul", "kind": "function", "doc": "<p>Returns (scaled) identity multiplied by input x.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Ax</strong> (torch.Tensor):\nself.rho * x</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Identity.transp_mat_mul", "modulename": "EPI_MRI.LinearOperators", "qualname": "Identity.transp_mat_mul", "kind": "function", "doc": "<p>Returns (scaled) identity multiplied by input x.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput tensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Atx</strong> (torch.Tensor):\nself.rho * x</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.Identity.inv", "modulename": "EPI_MRI.LinearOperators", "qualname": "Identity.inv", "kind": "function", "doc": "<p>Returns (scaled) inverse identity multiplied by input z.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>z</strong> (torch.Tensor):\ninput tensor</li>\n<li><strong>shift</strong> (float):\nscalar shift</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Liz</strong> (torch.Tensor):\nz / (self.rho + shift)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">shift</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.myAvg1D", "modulename": "EPI_MRI.LinearOperators", "qualname": "myAvg1D", "kind": "function", "doc": "<p>Builds and returns averaging operator as <code>Conv1D</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>dtype</strong> (torch.dtype):\ndata type</li>\n<li><strong>device</strong> (String):\ncompute device</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>A</strong> (<code>Conv1D</code>):\naveraging operator object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">dtype</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.myDiff1D", "modulename": "EPI_MRI.LinearOperators", "qualname": "myDiff1D", "kind": "function", "doc": "<p>Builds and returns derivative operator as <code>Conv1D</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>dtype</strong> (torch.dtype):\ndata type</li>\n<li><strong>device</strong> (String):\ncompute device</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>D</strong> (<code>Conv1D</code>):\nderivative operator object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">dtype</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.myLaplacian1D", "modulename": "EPI_MRI.LinearOperators", "qualname": "myLaplacian1D", "kind": "function", "doc": "<p>Builds and returns 1D Laplacian as <code>Conv1D</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>dtype</strong> (torch.dtype):\ndata type</li>\n<li><strong>device</strong> (String):\ncompute device</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>L</strong> (<code>Conv1D</code>):\n1D Laplacian operator object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">dtype</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.getLaplacianStencil", "modulename": "EPI_MRI.LinearOperators", "qualname": "getLaplacianStencil", "kind": "function", "doc": "<p>Builds Laplacian stencil.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>dtype</strong> (torch.dtype):\ndata type</li>\n<li><strong>device</strong> (String):\ncompute device</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>lx + ly + lz</strong> (torch.Tensor):\nfull Laplacian</li>\n<li><strong>lx</strong> (torch.Tensor):\nLaplacian in x dimension</li>\n<li><strong>ly</strong> (torch.Tensor):\nLaplacian in y dimension</li>\n<li><strong>lz</strong> (torch.Tensor):\nLaplacian in z dimension (None if image is 2D)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">dtype</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.myLaplacian2D", "modulename": "EPI_MRI.LinearOperators", "qualname": "myLaplacian2D", "kind": "function", "doc": "<p>Builds and returns 2D Laplacian in frequency encoding and slice directions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>dtype</strong> (torch.dtype):\ndata type</li>\n<li><strong>device</strong> (String):\ncompute device</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>L</strong> (<code>FFT3D</code>):\n2D Laplacian as 3D convolution implemented using FFT diagonalization.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">dtype</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.LinearOperators.myLaplacian3D", "modulename": "EPI_MRI.LinearOperators", "qualname": "myLaplacian3D", "kind": "function", "doc": "<p>Builds and returns 3D Laplacian.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>dtype</strong> (torch.dtype):\ndata type</li>\n<li><strong>device</strong> (String):\ncompute device</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>L</strong> (<code>Conv3D</code>):\n3D Laplacian as 3D convolution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">dtype</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.Preconditioners", "modulename": "EPI_MRI.Preconditioners", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "EPI_MRI.Preconditioners.Preconditioner", "modulename": "EPI_MRI.Preconditioners", "qualname": "Preconditioner", "kind": "class", "doc": "<p>Defines structure of a preconditioner object. All Preconditioner objects have method to build and\nevaluate using preconditioner.</p>\n", "bases": "abc.ABC"}, {"fullname": "EPI_MRI.Preconditioners.Preconditioner.eval", "modulename": "EPI_MRI.Preconditioners", "qualname": "Preconditioner.eval", "kind": "function", "doc": "<p>Apply preconditioner.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor (size m_plus(m))):\nTensor on which to apply preconditioner.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>preconditioned tensor</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.Preconditioners.Preconditioner.getM", "modulename": "EPI_MRI.Preconditioners", "qualname": "Preconditioner.getM", "kind": "function", "doc": "<p>Calculate preconditioner matrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><em>args, *</em>kwargs</strong> (any):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, sets self.M to preconditioner for use in PCG</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.Preconditioners.JacobiCG", "modulename": "EPI_MRI.Preconditioners", "qualname": "JacobiCG", "kind": "class", "doc": "<p>Defines Jacobi preconditioner.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dataObj</strong> (<code>EPIMRIDistortionCorrection.DataObject</code>):\nimage data</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (DataObject):\nDataObject containing information about the original image data.</li>\n</ul>\n", "bases": "Preconditioner"}, {"fullname": "EPI_MRI.Preconditioners.JacobiCG.__init__", "modulename": "EPI_MRI.Preconditioners", "qualname": "JacobiCG.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span>)</span>"}, {"fullname": "EPI_MRI.Preconditioners.JacobiCG.eval", "modulename": "EPI_MRI.Preconditioners", "qualname": "JacobiCG.eval", "kind": "function", "doc": "<p>Applies the Jacobi preconditioner to the input tensor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\nTensor on which to apply the preconditioner.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Mx</strong> (torch.Tensor):\npreconditioned tensor</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.Preconditioners.JacobiCG.getM", "modulename": "EPI_MRI.Preconditioners", "qualname": "JacobiCG.getM", "kind": "function", "doc": "<p>Computes and stores the preconditioner matrix as callable matrix-vector product.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>geom</strong> (torch.Tensor):\nGeometric modulation component of the correction model.</li>\n<li><strong>intensity</strong> (torch.Tensor):\nIntensity modulation component of the correction model.</li>\n<li><strong>hd</strong> (torch.Tensor):\nproduct of cell sizes in image</li>\n<li><strong>d2G</strong> (torch.Tensor):\nSecond derivative of the intensity modulation regularization term.</li>\n<li><strong>D</strong> (<code>LinearOperators.LinearOperator</code>):\nDerivative operator.</li>\n<li><strong>A</strong> (<code>LinearOperators.LinearOperator</code>):\nAveraging operator.</li>\n<li><strong>S</strong> (<code>LinearOperators.LinearOperator</code>):\nSmoothness Laplacian operator.</li>\n<li><strong>alpha</strong> (float):\nCoefficient for smoothness regularizer.</li>\n<li><strong>beta</strong> (float):\nCoefficient for the intensity modulation term.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Sets self.M to the preconditioner for use in PCG.</strong></li>\n<li><strong>diagD</strong> (torch.Tensor):\nPC component corresponding to distance term</li>\n<li><strong>diagS</strong> (torch.Tensor):\nPC component corresponding to smoothness regularizer</li>\n<li><strong>diagP</strong> (torch.Tensor):\nPC component corresponding to intensity regularizer</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">geom</span>, </span><span class=\"param\"><span class=\"n\">intensity</span>, </span><span class=\"param\"><span class=\"n\">hd</span>, </span><span class=\"param\"><span class=\"n\">d2G</span>, </span><span class=\"param\"><span class=\"n\">D</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">S</span>, </span><span class=\"param\"><span class=\"n\">alpha</span>, </span><span class=\"param\"><span class=\"n\">beta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.Regularizers", "modulename": "EPI_MRI.Regularizers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "EPI_MRI.Regularizers.QuadRegularizer", "modulename": "EPI_MRI.Regularizers", "qualname": "QuadRegularizer", "kind": "class", "doc": "<p>Defines the structure of an quadratic regularization term of the form S(x) = 1/2 ||x||_H^2 where H is positive semi-definite.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>H</strong> (<code>LinearOperators.LinearOperator</code>):\nThe linear operator used in the regularization.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>H</strong> (<code>LinearOperators.LinearOperator</code>):\nThe linear operator used in the regularization.</li>\n</ul>\n"}, {"fullname": "EPI_MRI.Regularizers.QuadRegularizer.__init__", "modulename": "EPI_MRI.Regularizers", "qualname": "QuadRegularizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">H</span></span>)</span>"}, {"fullname": "EPI_MRI.Regularizers.QuadRegularizer.eval", "modulename": "EPI_MRI.Regularizers", "qualname": "QuadRegularizer.eval", "kind": "function", "doc": "<p>Evaluate regularizer term.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput to regularizer term</li>\n<li><strong>do_derivative</strong> (boolean, optional):\nflag to compute derivative (default is False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>S</strong> (torch.Tensor):\nvalue of regularizer term</li>\n<li><strong>dS</strong> (torch.Tensor):\nderivative of regularizer term, None if do_derivative is False</li>\n<li><strong>d2S</strong> (<code>LinearOperators.LinearOperator</code>):\nHessian of regularizer term, None if do_derivative is False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">do_derivative</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.Regularizers.QuadRegularizer.prox_solve", "modulename": "EPI_MRI.Regularizers", "qualname": "QuadRegularizer.prox_solve", "kind": "function", "doc": "<p>Compute proximal step for the quadratic regularizer, i.e., solve</p>\n\n<pre><code>argmin_x  S(x) + rho/2 || x - z||^2.\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>z</strong> (torch.Tensor):\ninput</li>\n<li><strong>rho</strong> (float):\nscalar multiplier</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\nresult of solving proximal step</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">rho</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.Regularizers.TikRegularizer", "modulename": "EPI_MRI.Regularizers", "qualname": "TikRegularizer", "kind": "class", "doc": "<p>Defines the structure of a Tikonov Regularization object.\nOf the form 1/2 ||x - y||^2 where x is input and y is a reference value.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n<li><strong>hd</strong> (float):\nproduct of image cell sizes</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor):\nimage domain</li>\n<li><strong>m</strong> (torch.Tensor):\nimage size</li>\n</ul>\n"}, {"fullname": "EPI_MRI.Regularizers.TikRegularizer.__init__", "modulename": "EPI_MRI.Regularizers", "qualname": "TikRegularizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span></span>)</span>"}, {"fullname": "EPI_MRI.Regularizers.TikRegularizer.eval", "modulename": "EPI_MRI.Regularizers", "qualname": "TikRegularizer.eval", "kind": "function", "doc": "<p>Evaluate regularizer term.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\ninput to regularizer term</li>\n<li><strong>rho</strong> (float):\nscalar multiplier</li>\n<li><strong>y</strong> (torch.Tensor, optional):\nreference value (default is None)</li>\n<li><strong>do_derivative</strong> (boolean, optional):\nflag to compute derivative (default is False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>S</strong> (torch.Tensor):\nvalue of regularizer term</li>\n<li><strong>dS</strong> (torch.Tensor):\nderivative of regularizer term, None if do_derivative is False</li>\n<li><strong>d2S</strong> (<code>LinearOperators.LinearOperator</code>):\nHessian of regularizer term, None if do_derivative is False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">rho</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_derivative</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.utils", "modulename": "EPI_MRI.utils", "kind": "module", "doc": "<p>This file contains various stand-alone functions used throughout the correction process.</p>\n"}, {"fullname": "EPI_MRI.utils.load_data", "modulename": "EPI_MRI.utils", "qualname": "load_data", "kind": "function", "doc": "<p>Load original pair of images and return along with relevant parameters.</p>\n\n<p>Image dimension ordering in returned images:\n        - Phase encoding direction is in the last dimension.\n        - Frequency encoding direction is in the first dimension (2D) or second dimension (3D)\n                or third dimension (4D).\n        - Slice selection direction is in the first dimension (3D) or second dimension (4D).\n        - Diffusion is in the first dimension (4D).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>im1</strong> (str):\nFile path of the first image or stacked image.</li>\n<li><strong>im2</strong> (str, optional):\nFile path of the second image (default is None, if None assumes stacked image in im1).</li>\n<li><strong>phase_encoding_direction</strong> (int, optional):\nSpecifies which dimension of img1 and img2 is the phase encoding dimension\n(i.e., 1 for the first, 2 for the second, etc.) (default is 1).</li>\n<li><strong>n</strong> (int, optional):\nNumber of diffusion directions to load if 4D input (default is None)</li>\n<li><strong>device</strong> (str, optional):\nDevice on which to compute operations (default is 'cpu').</li>\n<li><strong>dtype</strong> (torch.dtype, optional):\nData type for all data tensors (default is torch.float64).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>rho0</strong> (torch.Tensor (shape m)):\nFirst image as a tensor.</li>\n<li><strong>rho1</strong> (torch.Tensor (shape m)):\nSecond image as a tensor.</li>\n<li><strong>omega</strong> (torch.Tensor (size # of dimensions x 2)):\nImage domain.</li>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\nDiscretization size.</li>\n<li><strong>h</strong> (torch.Tensor (size # of dimensions)):\nCell size.</li>\n<li><strong>permute_back</strong> (list (size # of dimensions)):\nOrder to permute dimensions to return the image to input orientation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">im1</span>,</span><span class=\"param\">\t<span class=\"n\">im2</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">phase_encoding_direction</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.utils.save_data", "modulename": "EPI_MRI.utils", "qualname": "save_data", "kind": "function", "doc": "<p>Save data to the given filepath.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (torch.Tensor (size any)):\nData to save.</li>\n<li><strong>filepath</strong> (str):\nPath where to save data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.utils.normalize", "modulename": "EPI_MRI.utils", "qualname": "normalize", "kind": "function", "doc": "<p>Normalize the pair of image intensities to [0, 256].</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>im1</strong> (torch.Tensor (size any)):\nFirst image.</li>\n<li><strong>im2</strong> (torch.Tensor (size any)):\nSecond image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>i1</strong> (torch.Tensor (size same as im1)):\nNormalized first image.</li>\n<li><strong>i2</strong> (torch.Tensor (size same as im2)):\nNormalized second image.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im1</span>, </span><span class=\"param\"><span class=\"n\">im2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.utils.m_plus", "modulename": "EPI_MRI.utils", "qualname": "m_plus", "kind": "function", "doc": "<p>Given dimensions m of the original image, return augmented dimensions (plus one in phase encoding direction).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\nOriginal dimensions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>m2</strong> (torch.Tensor (size # of dimensions)):\nAugmented dimensions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.utils.m_minus", "modulename": "EPI_MRI.utils", "qualname": "m_minus", "kind": "function", "doc": "<p>Given dimensions m of the augmented image, return original dimensions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\nAugmented dimensions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>m2</strong> (torch.Tensor (size # of dimensions)):\nOriginal dimensions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.utils.interp_parallel", "modulename": "EPI_MRI.utils", "qualname": "interp_parallel", "kind": "function", "doc": "<p>Vectorized interpolation - parallelized in the first (or first and second if 3D) dimension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor (size (dim, num_points))):\nGiven points.</li>\n<li><strong>y</strong> (torch.Tensor (size (1, num_points))):\nGiven function values.</li>\n<li><strong>xs</strong> (torch.Tensor (size (dim, num_new_points))):\nPoints at which to interpolate.</li>\n<li><strong>device</strong> (str, optional):\nDevice on which to compute operations (default is 'cpu').</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>interpolation</strong> (torch.Tensor (size (1, num_new_points))):\nFunction values at xs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">xs</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EPI_MRI.utils.get_cell_centered_grid", "modulename": "EPI_MRI.utils", "qualname": "get_cell_centered_grid", "kind": "function", "doc": "<p>Generate the cell-centered grid of size m over domain omega.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (torch.Tensor (size # of dimensions x 2)):\nImage domain.</li>\n<li><strong>m</strong> (torch.Tensor (size # of dimensions)):\nDiscretization size.</li>\n<li><strong>device</strong> (str, optional):\nDevice on which to compute operations (default is 'cpu').</li>\n<li><strong>dtype</strong> (torch.dtype, optional):\nData type for all data tensors (default is torch.float64).</li>\n<li><strong>return_all</strong> (bool, optional):\nFlag to return grid in non-distortion dimensions (default is False).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor (size (prod(m),1) or size (# of dimensions * prod(m),1) if return_all=True)):\nCell-centered grid in the distortion dimension or all dimensions if return_all=True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>, </span><span class=\"param\"><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span>, </span><span class=\"param\"><span class=\"n\">return_all</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization", "modulename": "optimization", "kind": "module", "doc": "<p>Perform optimization to find optimal field map for distortion correction.</p>\n\n<p>Files:</p>\n\n<ul>\n<li><code>ADMM</code>: A class implementing the Alternating Direction Method of Multipliers optimization algorithm.</li>\n<li><code>EPIOptimize</code>: A base class for different optimization algorithms in EPI-MRI distortion correction.</li>\n<li><code>GaussNewton</code>: A class implementing the Gauss-Newton optimization algorithm.</li>\n<li><code>LBFGS</code>: A class implementing the Limited-memory Broyden-Fletcher-Goldfarb-Shanno (L-BFGS) optimization algorithm.</li>\n<li><code>LCurve</code>: A class for EPI-MRI distortion correction choosing alpha parameter with LCurve.</li>\n<li><code>LinearSolvers</code> : Classes for linear solvers used in Gauss Newton and ADMM (e.g. conjugate gradient).</li>\n<li><code>OptimizationLogger</code>: A class for logging optimization iteration information and generating reports.</li>\n</ul>\n"}, {"fullname": "optimization.ADMM", "modulename": "optimization.ADMM", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "optimization.ADMM.ADMM", "modulename": "optimization.ADMM", "qualname": "ADMM", "kind": "class", "doc": "<p>Alternating Direction Method of Multipliers (ADMM) for EPI-MRI Distortion Correction.</p>\n\n<p>Solves min over b,z of D(b) + alpha S1(b) + beta P(b) + alpha S2(z) subject to b=z.</p>\n\n<pre><code>- b is used for all separable parts and solved using GN PCG\n\n- z is for the smoothness in non-distortion directions and solved using a proximal solve.\n</code></pre>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>corr_obj</strong> (EPIMRIDistortionCorrection):\nContains optimization problem objective function, data, and parameters.</li>\n<li><strong>max_iter</strong> (int):\nMaximum number of ADMM iterations.</li>\n<li><strong>rho_min</strong> (float):\nMinimum value of the Lagrangian constant.</li>\n<li><strong>rho_max</strong> (float):\nMaximum value of the Lagrangian constant.</li>\n<li><strong>verbose</strong> (boolean):\nFlag to print details of the optimization.</li>\n<li><strong>path</strong> (str):\nFilepath for log file, results, and saved images.</li>\n<li><strong>g</strong> (<code>Regulariers.QuadRegularizer</code>):\noptimizer for z term</li>\n<li><strong>opt</strong> (<code>GaussNewton.GaussNewton</code>):\noptimizer for b term</li>\n<li><strong>b</strong> (torch.Tensor):\ncurrent value of b</li>\n<li><strong>z</strong> (torch.Tensor):\ncurrent value of z</li>\n<li><strong>u</strong> (torch.Tensor):\ncurrent value of u</li>\n<li><strong>B0</strong> (torch.Tensor):\ninitial guess for field map</li>\n<li><strong>Bc</strong> (torch.Tensor):\noptimal field map</li>\n<li><strong>log</strong> (<code>OptimizationLogger</code>):\nclass logging optimization information and metrics</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>corr_obj</strong> (EPIMRIDistortionCorrection):\nContains optimization problem objective function, data, and parameters.</li>\n<li><strong>max_iter</strong> (int, optional):\nMaximum number of ADMM iterations (default is 10).</li>\n<li><strong>rho_min</strong> (float, optional):\nMinimum value of the Lagrangian constant (default is 100).</li>\n<li><strong>rho_max</strong> (float, optional):\nMaximum value of the Lagrangian constant (default is 100).</li>\n<li><strong>max_iter_gn</strong> (int, optional):\nMaximum number of Gauss-Newton (GN) iterations (outer iterations) (default is 3).</li>\n<li><strong>max_iter_pcg</strong> (int, optional):\nMaximum number of Preconditioned Conjugate Gradient (PCG) iterations (inner iterations) (default is 20).</li>\n<li><strong>tol_gn</strong> (float, optional):\nTolerance for the GN optimization (default is 0.1).</li>\n<li><strong>verbose</strong> (boolean, optional):\nFlag to print details of the optimization (default is False).</li>\n<li><strong>path</strong> (str, optional):\nFilepath for log file, results, and saved images (default is '').</li>\n</ul>\n", "bases": "optimization.EPIOptimize.EPIOptimize"}, {"fullname": "optimization.ADMM.ADMM.__init__", "modulename": "optimization.ADMM", "qualname": "ADMM.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">corr_obj</span>,</span><span class=\"param\">\t<span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">rho_min</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">rho_max</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">max_iter_gn</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">max_iter_pcg</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">tol_gn</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "optimization.ADMM.ADMM.run_correction", "modulename": "optimization.ADMM", "qualname": "ADMM.run_correction", "kind": "function", "doc": "<p>Perform the ADMM optimization for EPI-MRI distortion correction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size mplus(m))):\nInitial guess for the field map.</li>\n<li><strong>debug</strong> (Boolean, optional):\nflag to compute and show Langrangian (default is False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, sets self.Bc to optimal field map</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B0</span>, </span><span class=\"param\"><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.ADMM.ADMM.eval_Lagrangian", "modulename": "optimization.ADMM", "qualname": "ADMM.eval_Lagrangian", "kind": "function", "doc": "<p>Evaluate the Lagrangian function for ADMM.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>b</strong> (torch.Tensor):\nCurrent estimate for the field map.</li>\n<li><strong>z</strong> (torch.Tensor):\nDual variable for ADMM.</li>\n<li><strong>u</strong> (torch.Tensor):\nProximal variable for ADMM.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Lc</strong> (torch.Tensor):\nValue of the Lagrangian function.</li>\n<li><strong>Jc</strong> (torch.Tensor):\nValue of objective function for b</li>\n<li><strong>Dc</strong> (torch.Tensor):\nDistance term value</li>\n<li><strong>Sc</strong> (torch.Tensor):\nSmoothness term value</li>\n<li><strong>Pc</strong> (torch.Tensor):\nIntensity modulation term value</li>\n<li><strong>Qc</strong> (torch.Tensor):\nProximal term value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">u</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.EPIOptimize", "modulename": "optimization.EPIOptimize", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "optimization.EPIOptimize.EPIOptimize", "modulename": "optimization.EPIOptimize", "qualname": "EPIOptimize", "kind": "class", "doc": "<p>General superclass for optimizers for EPI-MRI Distortion Correction.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>corr_obj</strong> (EPIMRIDistortionCorrection):\nContains the optimization problem objective function, data, and parameters.</li>\n<li><strong>verbose</strong> (bool):\nFlag to print details of optimization.</li>\n<li><strong>B0</strong> (torch.Tensor):\nInitial guess for the field map.</li>\n<li><strong>Bc</strong> (torch.Tensor):\nOptimal field map.</li>\n<li><strong>max_iter</strong> (int):\nMaximum number of iterations for optimization.</li>\n<li><strong>path</strong> (str):\nFilepath for log file, results, and saved images.</li>\n<li><strong>log</strong> (OptimizationLogger):\nClass to handle logging optimization history and information.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>corr_obj</strong> (<code>EPIMRIDistortionCorrection</code>):\ncontains optimization problem objective function, data, and parameters</li>\n<li><strong>verbose</strong> (boolean, optional):\nflag to print details of optimization (default is False)</li>\n<li><strong>max_iter</strong> (int, optional):\nmaximum number of iterations (default is 200)</li>\n<li><strong>path</strong> (String, optional):\nfilepath for log file, results, and saved images (default is '')</li>\n</ul>\n"}, {"fullname": "optimization.EPIOptimize.EPIOptimize.__init__", "modulename": "optimization.EPIOptimize", "qualname": "EPIOptimize.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corr_obj</span>, </span><span class=\"param\"><span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">200</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "optimization.EPIOptimize.EPIOptimize.visualize", "modulename": "optimization.EPIOptimize", "qualname": "EPIOptimize.visualize", "kind": "function", "doc": "<p>Visualize and save results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>slice_num</strong> (int, optional):\nfor 3D and 4D the slice to visualize (default is None)</li>\n<li><strong>diffusion_num</strong> (int, optional):\nfor 4D the diffusion direction to visualize (default is None)</li>\n<li><strong>img_min</strong> (int, optional):\nvmin value for images (default is 0)</li>\n<li><strong>img_max</strong> (int, optional):\nvmax value for images (default is 50)</li>\n<li><strong>diff_min</strong> (int, optional):\nvmin value for (inverted) difference images (default is -50)</li>\n<li><strong>diff_max</strong> (int, optional):\nvmax value for (inverted) difference images (default is 0)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">slice_num</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">diffusion_num</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">img_min</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">img_max</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">diff_min</span><span class=\"o\">=-</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">diff_max</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.EPIOptimize.EPIOptimize.evaluate_optimization", "modulename": "optimization.EPIOptimize", "qualname": "EPIOptimize.evaluate_optimization", "kind": "function", "doc": "<p>Evaluates initialization and optimization results.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dist</strong> (torch.Tensor):\ncorrected image distance</li>\n<li><strong>reg</strong> (torch.Tensor):\nsmoothness regularizer value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.EPIOptimize.EPIOptimize.run_correction", "modulename": "optimization.EPIOptimize", "qualname": "EPIOptimize.run_correction", "kind": "function", "doc": "<p>Runs correction.\nMust be implemented by subclass and store optimal field map in self.Bc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size mplus(m))):\ninitial guess for field map</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.EPIOptimize.EPIOptimize.apply_correction", "modulename": "optimization.EPIOptimize", "qualname": "EPIOptimize.apply_correction", "kind": "function", "doc": "<p>Apply optimal field map to correct inputs. Saves resulting images and optimal field map as NIFTI files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>method</strong> (String, optional):\ncorrection method, either 'jac' for Jacobian modulation (default) or 'lstsq' for least squares restoration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>corr1(, corr2)</strong> (torch.Tensor):\ncorrected image(s)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;jac&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.GaussNewton", "modulename": "optimization.GaussNewton", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "optimization.GaussNewton.GaussNewton", "modulename": "optimization.GaussNewton", "qualname": "GaussNewton", "kind": "class", "doc": "<p>A class for performing EPI-MRI distortion correction using Gauss-Newton optimization with Jacobi smoother.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>corr_obj</strong> (EPIMRIDistortionCorrection):\nAn object containing the optimization problem's objective function, data, and parameters.</li>\n<li><strong>max_iter</strong> (int):\nMaximum number of Gauss-Newton (outer) iterations</li>\n<li><strong>verbose</strong> (bool):\nFlag to print details of optimization</li>\n<li><strong>path</strong> (str):\nFilepath for log file, results, and saved images</li>\n<li><strong>tolG</strong> (float):\ntolerance for stopping due to gradient norm</li>\n<li><strong>linear_solver</strong> (<code>LinearSolver</code>):\ninner solver</li>\n<li><strong>line_search</strong> (<code>Armijo</code> or <code>FixedStep</code>):\nline search method</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>corr_obj</strong> (EPIMRIDistortionCorrection):\nAn object containing the optimization problem's objective function, data, and parameters.</li>\n<li><strong>max_iter</strong> (int, optional):\nMaximum number of Gauss-Newton (outer) iterations. Default is 10.</li>\n<li><strong>verbose</strong> (bool, optional):\nFlag to print details of optimization. Default is False.</li>\n<li><strong>path</strong> (str, optional):\nFilepath for log file, results, and saved images. Default is an empty string.</li>\n<li><strong>tolG</strong> (float, optional):\nTolerance for stopping due to gradient norm. Default is 1e-4.</li>\n<li><strong>linear_solver</strong> (<code>LinearSolver</code>, optional):\nClass to use for inner solver. Default is None (uses <code>PCG</code>).</li>\n<li><strong>line_search</strong> (<code>Armijo</code> or <code>FixedStep</code>):\nClass to use for line search. Default is None (uses <code>Armijo</code>).</li>\n</ul>\n", "bases": "optimization.EPIOptimize.EPIOptimize"}, {"fullname": "optimization.GaussNewton.GaussNewton.__init__", "modulename": "optimization.GaussNewton", "qualname": "GaussNewton.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">corr_obj</span>,</span><span class=\"param\">\t<span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">tolG</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">linear_solver</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line_search</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "optimization.GaussNewton.GaussNewton.run_correction", "modulename": "optimization.GaussNewton", "qualname": "GaussNewton.run_correction", "kind": "function", "doc": "<p>Run the optimization using the calculated derivative.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size m_plus(m))):\nInitial guess for the field map.</li>\n<li><strong>yref</strong> (torch.Tensor, optional):\nReference data for distortion correction. Default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Bc</strong> (torch.Tensor (size m_plus(m))):\noptimal field map</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B0</span>, </span><span class=\"param\"><span class=\"n\">yref</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.GaussNewton.FixedStep", "modulename": "optimization.GaussNewton", "qualname": "FixedStep", "kind": "class", "doc": "<p>Uses a fixed-length step size in a line search.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nstep-size</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (float, optional):\nstep-size (Default is 1)</li>\n</ul>\n"}, {"fullname": "optimization.GaussNewton.FixedStep.__init__", "modulename": "optimization.GaussNewton", "qualname": "FixedStep.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "optimization.GaussNewton.FixedStep.eval", "modulename": "optimization.GaussNewton", "qualname": "FixedStep.eval", "kind": "function", "doc": "<p>Computes line search and update.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong> (<code>EPIMRIDistortionCorrection</code>):\nobjective function</li>\n<li><strong>Yc</strong> (torch.Tensor):\ncurrent field map estimate</li>\n<li><strong>dY</strong> (torch.Tensor):\nupdate direction</li>\n<li><strong>Jc</strong> (torch.Tensor):\ncurrent objective function value</li>\n<li><strong>dJ</strong> (torch.Tensor):\ncurrent objective function gradient</li>\n<li><strong>yref</strong> (torch.Tensor, optional):\nreference value (default is None)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nstep-size</li>\n<li><strong>Yt</strong> (torch.Tensor):\nupdated field map estimate</li>\n<li><strong>i</strong> (int):\nnumber of line search iterations (always 0)</li>\n<li><strong>success</strong> (Boolean):\nsuccess of line search (always True)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">Yc</span>, </span><span class=\"param\"><span class=\"n\">dY</span>, </span><span class=\"param\"><span class=\"n\">Jc</span>, </span><span class=\"param\"><span class=\"n\">dJ</span>, </span><span class=\"param\"><span class=\"n\">yref</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.GaussNewton.Armijo", "modulename": "optimization.GaussNewton", "qualname": "Armijo", "kind": "class", "doc": "<p>Uses Armijo line search.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>maxIter</strong> (int):\nmaximum number of line search iterations</li>\n<li><strong>reduction</strong> (float):\nminimum reduction of objective function value</li>\n<li><strong>t</strong> (float):\ninitial line search step-size</li>\n<li><strong>verbose</strong> (Boolean):\nflag to print information about line search</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>maxIter</strong> (int, optional):\nmaximum number of line search iterations (default is 25)</li>\n<li><strong>reduction</strong> (float, optional):\nminimum reduction of objective function value (default is 1e-6)</li>\n<li><strong>t</strong> (float, optional):\ninitial line search step-size (default is 1)</li>\n<li><strong>verbose</strong> (Boolean, optional):\nflag to print information about line search (default is False)</li>\n</ul>\n"}, {"fullname": "optimization.GaussNewton.Armijo.__init__", "modulename": "optimization.GaussNewton", "qualname": "Armijo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">25</span>, </span><span class=\"param\"><span class=\"n\">reduction</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "optimization.GaussNewton.Armijo.eval", "modulename": "optimization.GaussNewton", "qualname": "Armijo.eval", "kind": "function", "doc": "<p>Computes line search and update.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong> (<code>EPIMRIDistortionCorrection</code>):\nobjective function</li>\n<li><strong>Yc</strong> (torch.Tensor):\ncurrent field map estimate</li>\n<li><strong>dY</strong> (torch.Tensor):\nupdate direction</li>\n<li><strong>Jc</strong> (torch.Tensor):\ncurrent objective function value</li>\n<li><strong>dJ</strong> (torch.Tensor):\ncurrent objective function gradient</li>\n<li><strong>yref</strong> (torch.Tensor, optional):\nreference value (default is None)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>t</strong> (float):\nstep-size</li>\n<li><strong>Yt</strong> (torch.Tensor):\nupdated field map estimate</li>\n<li><strong>i</strong> (int):\nnumber of line search iterations</li>\n<li><strong>success</strong> (Boolean):\nsuccess of line search</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">Yc</span>, </span><span class=\"param\"><span class=\"n\">dY</span>, </span><span class=\"param\"><span class=\"n\">Jc</span>, </span><span class=\"param\"><span class=\"n\">dJ</span>, </span><span class=\"param\"><span class=\"n\">yref</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS", "modulename": "optimization.LBFGS", "kind": "module", "doc": "<p>all of this file except LBFGS class is from <a href=\"https://github.com/hjmshi/PyTorch-LBFGS/blob/master/functions/LBFGS.py\">https://github.com/hjmshi/PyTorch-LBFGS/blob/master/functions/LBFGS.py</a></p>\n"}, {"fullname": "optimization.LBFGS.LBFGS", "modulename": "optimization.LBFGS", "qualname": "LBFGS", "kind": "class", "doc": "<p>EPI-MRI Distortion Correction using l-BFGS.</p>\n\n<p>Inherits from EPIOptimize to implement optimization functionality for EPI-MRI Distortion Correction\nusing the limited-memory Broyden-Fletcher-Goldfarb-Shanno (l-BFGS) algorithm.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>corr_obj</strong> (<code>EPIMRIDistortionCorrection</code>):\ncontains optimization problem objective function, data, and parameters</li>\n<li><strong>verbose</strong> (boolean):\nflag to print details of optimization</li>\n<li><strong>B0</strong> (torch.Tensor):\ninitial guess for field map</li>\n<li><strong>max_iter</strong> (int):\nmaximum number of LBFGS iterations</li>\n<li><strong>Bc</strong> (torch.Tensor):\nfinal field map</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>corr_obj</strong> (EPIMRIDistortionCorrection):\ncontains optimization problem objective function, data, and parameters</li>\n<li><strong>verbose</strong> (boolean, optional):\nflag to print details of optimization (default is False)</li>\n<li><strong>max_iter</strong> (int, optional):\nmaximum number of LBFGS iterations (default is 200)</li>\n<li><strong>path</strong> (String, optional):\nfilepath for log file, results, and saved images (default is '')</li>\n</ul>\n", "bases": "optimization.EPIOptimize.EPIOptimize"}, {"fullname": "optimization.LBFGS.LBFGS.__init__", "modulename": "optimization.LBFGS", "qualname": "LBFGS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">corr_obj</span>, </span><span class=\"param\"><span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">200</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "optimization.LBFGS.LBFGS.run_correction", "modulename": "optimization.LBFGS", "qualname": "LBFGS.run_correction", "kind": "function", "doc": "<p>Run optimization (using calculated derivative).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size mplus(m))):\ninitial guess for field map</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS.LBFGS.run_correction_use_autograd", "modulename": "optimization.LBFGS", "qualname": "LBFGS.run_correction_use_autograd", "kind": "function", "doc": "<p>Run optimization (using autograd).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>B0</strong> (torch.Tensor (size mplus(m))):\ninitial guess for field map</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">B0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS.is_legal", "modulename": "optimization.LBFGS", "qualname": "is_legal", "kind": "function", "doc": "<p>Checks that tensor is not NaN or Inf.</p>\n\n<p>Inputs:\n    v (tensor): tensor to be checked</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS.polyinterp", "modulename": "optimization.LBFGS", "qualname": "polyinterp", "kind": "function", "doc": "<p>Gives the minimizer and minimum of the interpolating polynomial over given points\nbased on function and derivative information. Defaults to bisection if no critical\npoints are valid.</p>\n\n<p>Based on polyinterp.m Matlab function in minFunc by Mark Schmidt with some slight\nmodifications.</p>\n\n<p>Implemented by: Hao-Jun Michael Shi and Dheevatsa Mudigere\nLast edited 12/6/18.</p>\n\n<p>Inputs:\n    points (nparray): two-dimensional array with each point of form [x f g]\n    x_min_bound (float): minimum value that brackets minimum (default: minimum of points)\n    x_max_bound (float): maximum value that brackets minimum (default: maximum of points)\n    plot (bool): plot interpolating polynomial</p>\n\n<p>Outputs:\n    x_sol (float): minimizer of interpolating polynomial\n    F_min (float): minimum of interpolating polynomial</p>\n\n<p>Note:\n  . Set f or g to np.nan if they are unknown</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span>, </span><span class=\"param\"><span class=\"n\">x_min_bound</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">x_max_bound</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS.LBFGSSolve", "modulename": "optimization.LBFGS", "qualname": "LBFGSSolve", "kind": "class", "doc": "<p>Implements the L-BFGS algorithm. Compatible with multi-batch and full-overlap\nL-BFGS implementations and (stochastic) Powell damping. Partly based on the\noriginal L-BFGS implementation in PyTorch, Mark Schmidt's minFunc MATLAB code,\nand Michael Overton's weak Wolfe line search MATLAB code.</p>\n\n<p>Implemented by: Hao-Jun Michael Shi and Dheevatsa Mudigere\nLast edited 10/20/20.</p>\n\n<p>Warnings:\n  . Does not support per-parameter options and parameter groups.\n  . All parameters have to be on a single device.</p>\n\n<p>Inputs:\n    lr (float): steplength or learning rate (default: 1)\n    history_size (int): update history size (default: 10)\n    line_search (str): designates line search to use (default: 'Wolfe')\n        Options:\n            'None': uses steplength designated in algorithm\n            'Armijo': uses Armijo backtracking line search\n            'Wolfe': uses Armijo-Wolfe bracketing line search\n    dtype: data type (default: torch.float)\n    debug (bool): debugging mode</p>\n\n<p>References:\n[1] Berahas, Albert S., Jorge Nocedal, and Martin Tak\u00e1c. \"A Multi-Batch L-BFGS\n    Method for Machine Learning.\" Advances in Neural Information Processing\n    Systems. 2016.\n[2] Bollapragada, Raghu, et al. \"A Progressive Batching L-BFGS Method for Machine\n    Learning.\" International Conference on Machine Learning. 2018.\n[3] Lewis, Adrian S., and Michael L. Overton. \"Nonsmooth Optimization via Quasi-Newton\n    Methods.\" Mathematical Programming 141.1-2 (2013): 135-163.\n[4] Liu, Dong C., and Jorge Nocedal. \"On the Limited Memory BFGS Method for\n    Large Scale Optimization.\" Mathematical Programming 45.1-3 (1989): 503-528.\n[5] Nocedal, Jorge. \"Updating Quasi-Newton Matrices With Limited Storage.\"\n    Mathematics of Computation 35.151 (1980): 773-782.\n[6] Nocedal, Jorge, and Stephen J. Wright. \"Numerical Optimization.\" Springer New York,\n    2006.\n[7] Schmidt, Mark. \"minFunc: Unconstrained Differentiable Multivariate Optimization\n    in Matlab.\" Software available at <a href=\"http://www.cs.ubc.ca/~schmidtm/Software/minFunc.html\">http://www.cs.ubc.ca/~schmidtm/Software/minFunc.html</a>\n    (2005).\n[8] Schraudolph, Nicol N., Jin Yu, and Simon G\u00fcnter. \"A Stochastic Quasi-Newton\n    Method for Online Convex Optimization.\" Artificial Intelligence and Statistics.\n    2007.\n[9] Wang, Xiao, et al. \"Stochastic Quasi-Newton Methods for Nonconvex Stochastic\n    Optimization.\" SIAM Journal on Optimization 27.2 (2017): 927-956.</p>\n", "bases": "torch.optim.optimizer.Optimizer"}, {"fullname": "optimization.LBFGS.LBFGSSolve.__init__", "modulename": "optimization.LBFGS", "qualname": "LBFGSSolve.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">params</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">history_size</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">line_search</span><span class=\"o\">=</span><span class=\"s1\">&#39;Wolfe&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float32</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "optimization.LBFGS.LBFGSSolve.line_search", "modulename": "optimization.LBFGS", "qualname": "LBFGSSolve.line_search", "kind": "function", "doc": "<p>Switches line search option.</p>\n\n<p>Inputs:\n    line_search (str): designates line search to use\n        Options:\n            'None': uses steplength designated in algorithm\n            'Armijo': uses Armijo backtracking line search\n            'Wolfe': uses Armijo-Wolfe bracketing line search</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line_search</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS.LBFGSSolve.two_loop_recursion", "modulename": "optimization.LBFGS", "qualname": "LBFGSSolve.two_loop_recursion", "kind": "function", "doc": "<p>Performs two-loop recursion on given vector to obtain Hv.</p>\n\n<p>Inputs:\n    vec (tensor): 1-D tensor to apply two-loop recursion to</p>\n\n<p>Output:\n    r (tensor): matrix-vector product Hv</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS.LBFGSSolve.curvature_update", "modulename": "optimization.LBFGS", "qualname": "LBFGSSolve.curvature_update", "kind": "function", "doc": "<p>Performs curvature update.</p>\n\n<p>Inputs:\n    flat_grad (tensor): 1-D tensor of flattened gradient for computing\n        gradient difference with previously stored gradient\n    eps (float): constant for curvature pair rejection or damping (default: 1e-2)\n    damping (bool): flag for using Powell damping (default: False)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flat_grad</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">damping</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS.LBFGSSolve.step", "modulename": "optimization.LBFGS", "qualname": "LBFGSSolve.step", "kind": "function", "doc": "<p>Performs a single optimization step (parameter update).</p>\n\n<p>Args:\n    closure (callable): A closure that reevaluates the model and\n        returns the loss. Optional for most optimizers.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Unless otherwise specified, this function should not modify the\n<code>.grad</code> field of the parameters.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p_k</span>, </span><span class=\"param\"><span class=\"n\">g_Ok</span>, </span><span class=\"param\"><span class=\"n\">g_Sk</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LBFGS.FullBatchLBFGS", "modulename": "optimization.LBFGS", "qualname": "FullBatchLBFGS", "kind": "class", "doc": "<p>Implements full-batch or deterministic L-BFGS algorithm. Compatible with\nPowell damping. Can be used when evaluating a deterministic function and\ngradient. Wraps the LBFGS optimizer. Performs the two-loop recursion,\nupdating, and curvature updating in a single step.</p>\n\n<p>Implemented by: Hao-Jun Michael Shi and Dheevatsa Mudigere\nLast edited 11/15/18.</p>\n\n<p>Warnings:\n  . Does not support per-parameter options and parameter groups.\n  . All parameters have to be on a single device.</p>\n\n<p>Inputs:\n    lr (float): steplength or learning rate (default: 1)\n    history_size (int): update history size (default: 10)\n    line_search (str): designates line search to use (default: 'Wolfe')\n        Options:\n            'None': uses steplength designated in algorithm\n            'Armijo': uses Armijo backtracking line search\n            'Wolfe': uses Armijo-Wolfe bracketing line search\n    dtype: data type (default: torch.float)\n    debug (bool): debugging mode</p>\n", "bases": "LBFGSSolve"}, {"fullname": "optimization.LBFGS.FullBatchLBFGS.__init__", "modulename": "optimization.LBFGS", "qualname": "FullBatchLBFGS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">params</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">history_size</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">line_search</span><span class=\"o\">=</span><span class=\"s1\">&#39;Wolfe&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float32</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "optimization.LBFGS.FullBatchLBFGS.step", "modulename": "optimization.LBFGS", "qualname": "FullBatchLBFGS.step", "kind": "function", "doc": "<p>Performs a single optimization step.</p>\n\n<p>Inputs:\n    options (dict): contains options for performing line search (default: None)</p>\n\n<p>General Options:\n    'eps' (float): constant for curvature pair rejection or damping (default: 1e-2)\n    'damping' (bool): flag for using Powell damping (default: False)</p>\n\n<p>Options for Armijo backtracking line search:\n    'closure' (callable): reevaluates model and returns function value\n    'current_loss' (tensor): objective value at current iterate (default: F(x_k))\n    'gtd' (tensor): inner product g_Ok'd in line search (default: g_Ok'd)\n    'eta' (tensor): factor for decreasing steplength &gt; 0 (default: 2)\n    'c1' (tensor): sufficient decrease constant in (0, 1) (default: 1e-4)\n    'max_ls' (int): maximum number of line search steps permitted (default: 10)\n    'interpolate' (bool): flag for using interpolation (default: True)\n    'inplace' (bool): flag for inplace operations (default: True)\n    'ls_debug' (bool): debugging mode for line search</p>\n\n<p>Options for Wolfe line search:\n    'closure' (callable): reevaluates model and returns function value\n    'current_loss' (tensor): objective value at current iterate (default: F(x_k))\n    'gtd' (tensor): inner product g_Ok'd in line search (default: g_Ok'd)\n    'eta' (float): factor for extrapolation (default: 2)\n    'c1' (float): sufficient decrease constant in (0, 1) (default: 1e-4)\n    'c2' (float): curvature condition constant in (0, 1) (default: 0.9)\n    'max_ls' (int): maximum number of line search steps permitted (default: 10)\n    'interpolate' (bool): flag for using interpolation (default: True)\n    'inplace' (bool): flag for inplace operations (default: True)\n    'ls_debug' (bool): debugging mode for line search</p>\n\n<p>Outputs (depends on line search):\n  . No line search:\n        t (float): steplength\n  . Armijo backtracking line search:\n        F_new (tensor): loss function at new iterate\n        t (tensor): final steplength\n        ls_step (int): number of backtracks\n        closure_eval (int): number of closure evaluations\n        desc_dir (bool): descent direction flag\n            True: p_k is descent direction with respect to the line search\n            function\n            False: p_k is not a descent direction with respect to the line\n            search function\n        fail (bool): failure flag\n            True: line search reached maximum number of iterations, failed\n            False: line search succeeded\n  . Wolfe line search:\n        F_new (tensor): loss function at new iterate\n        g_new (tensor): gradient at new iterate\n        t (float): final steplength\n        ls_step (int): number of backtracks\n        closure_eval (int): number of closure evaluations\n        grad_eval (int): number of gradient evaluations\n        desc_dir (bool): descent direction flag\n            True: p_k is descent direction with respect to the line search\n            function\n            False: p_k is not a descent direction with respect to the line\n            search function\n        fail (bool): failure flag\n            True: line search reached maximum number of iterations, failed\n            False: line search succeeded</p>\n\n<p>Notes:\n  . If encountering line search failure in the deterministic setting, one\n    should try increasing the maximum number of line search steps max_ls.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LCurve", "modulename": "optimization.LCurve", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "optimization.LCurve.LCurve", "modulename": "optimization.LCurve", "qualname": "LCurve", "kind": "class", "doc": "<p>EPI-MRI Distortion Correction, choosing alpha parameter with LCurve.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>dataObj</strong> (<code>DataObject</code>):\nOriginal data and parameters.</li>\n<li><strong>loss_func</strong> (<code>EPIMRIDistortionCorrection</code>):\nContains optimization problem objective function, data, and parameters.</li>\n<li><strong>opt</strong> (<code>EPIOptimize</code>):\nOptimizer to use.</li>\n<li><strong>verbose</strong> (bool):\nFlag to print details of optimization.</li>\n<li><strong>max_iter</strong> (int):\nMaximum number of LBFGS iterations.</li>\n<li><strong>Bc</strong> (torch.Tensor):\nFinal field map.</li>\n<li><strong>alpha_min</strong> (float):\nSmallest alpha to try.</li>\n<li><strong>alpha_max</strong> (float):\nLargest alpha to try.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (<code>DataObject</code>):\nImage data.</li>\n<li><strong>loss_func</strong> (<code>EPIMRIDistortionCorrection</code>):\nContains optimization problem objective function, data, and parameters.</li>\n<li><strong>opt</strong> (<code>EPIOptimize</code>):\nOptimizer.</li>\n<li><strong>alpha_min</strong> (float):\nSmallest alpha to try.</li>\n<li><strong>alpha_max</strong> (float):\nLargest alpha to try.</li>\n<li><strong>num_points</strong> (int, optional):\nNumber of alphas on LCurve (default is 10).</li>\n<li><strong>verbose</strong> (bool, optional):\nFlag to print details of optimization (default is False).</li>\n<li><strong>path</strong> (str, optional):\nFilepath for log file, results, and saved images (default is '').</li>\n</ul>\n", "bases": "optimization.EPIOptimize.EPIOptimize"}, {"fullname": "optimization.LCurve.LCurve.__init__", "modulename": "optimization.LCurve", "qualname": "LCurve.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">loss_func</span>,</span><span class=\"param\">\t<span class=\"n\">opt</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_min</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_max</span>,</span><span class=\"param\">\t<span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "optimization.LCurve.LCurve.run_correction", "modulename": "optimization.LCurve", "qualname": "LCurve.run_correction", "kind": "function", "doc": "<p>Run optimization (using LCurve).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pre_smooth</strong> (bool, optional):\nUse pre-smoothing on OT initialization (default is True).</li>\n<li><strong>return_all</strong> (bool, optional):\nFlag to return all field maps for all alphas (default is False).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: for 'min_alpha', 'max_alpha', and 'max_curvature' list of alpha, field map, first corrected image, and\nsecond corrected image\nwhen return_all is True, also includes for 'all': [max curvature index, list of alphas,\nlist of field maps, list of first corrected images, list of second corrected images,\nlist of distances, list of smoothness values, list of curvature values]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pre_smooth</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">return_all</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LCurve.LCurve.visualize", "modulename": "optimization.LCurve", "qualname": "LCurve.visualize", "kind": "function", "doc": "<p>Visualize the results, including LCurve and corrected images.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>slice_num</strong> (int, optional):\nSlice number to visualize (default is None).</li>\n<li><strong>diffusion_num</strong> (int, optional):\nDiffusion number to visualize (default is None).</li>\n<li><strong>img_min</strong> (int, optional):\nMinimum value for image visualization (default is 0).</li>\n<li><strong>img_max</strong> (int, optional):\nMaximum value for image visualization (default is 50).</li>\n<li><strong>diff_min</strong> (int, optional):\nMinimum value for difference visualization (default is -50).</li>\n<li><strong>diff_max</strong> (int, optional):\nMaximum value for difference visualization (default is 0).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">slice_num</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">diffusion_num</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">img_min</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">img_max</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">diff_min</span><span class=\"o\">=-</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">diff_max</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LinearSolvers", "modulename": "optimization.LinearSolvers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "optimization.LinearSolvers.Jacobi", "modulename": "optimization.LinearSolvers", "qualname": "Jacobi", "kind": "class", "doc": "<p>Damped Jacobi solver for Ax=b</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>max_iter</strong> (int):\nmaximum number of iterations</li>\n<li><strong>tol</strong> (float):\ntolerance for convergence</li>\n<li><strong>omega</strong> (float):\ndampening parameter</li>\n<li><strong>verbose</strong> (Boolean):\nflag to print optimization information</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_iter</strong> (int, optional):\nmaximum number of iterations (default is 10)</li>\n<li><strong>tol</strong> (float, optional):\ntolerance for convergence (default is 1e-2)</li>\n<li><strong>omega</strong> (float, optional):\ndampening parameter (default is 2/3)</li>\n<li><strong>verbose</strong> (Boolean, optional):\nflag to print optimization information (default is False)</li>\n</ul>\n"}, {"fullname": "optimization.LinearSolvers.Jacobi.__init__", "modulename": "optimization.LinearSolvers", "qualname": "Jacobi.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">omega</span><span class=\"o\">=</span><span class=\"mf\">0.6666666666666666</span>, </span><span class=\"param\"><span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "optimization.LinearSolvers.Jacobi.eval", "modulename": "optimization.LinearSolvers", "qualname": "Jacobi.eval", "kind": "function", "doc": "<p>Solve system Ax=b using Jacobi with initial guess x and preconditioner M.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (callable):\nHessian mat-vec</li>\n<li><strong>b</strong> (torch.Tensor):\nRHS of the system (negative Jacobian)</li>\n<li><strong>M</strong> (callable):\npreconditioner</li>\n<li><strong>x</strong> (torch.Tensor, optional):\ninitial guess (default is None)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\noptimal value</li>\n<li><strong>res</strong> (float):\nresidual of system</li>\n<li><strong>it</strong> (int):\nnumber of iterations</li>\n<li><strong>itOpt</strong> (int):\noptimal iteration</li>\n<li><strong>resvec</strong> (list):\nlist of residuals at each iteration</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">M</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LinearSolvers.PCG", "modulename": "optimization.LinearSolvers", "qualname": "PCG", "kind": "class", "doc": "<p>A class for performing Preconditioned Conjugate Gradient (PCG) optimization.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>max_iter</strong> (int):\nMaximum number of PCG iterations.</li>\n<li><strong>tol</strong> (float):\nStopping tolerance for PCG.</li>\n<li><strong>verbose</strong> (bool):\nFlag to print details of the optimization.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_iter</strong> (int, optional):\nMaximum number of PCG iterations. Default is 10.</li>\n<li><strong>tol</strong> (float, optional):\nStopping tolerance for PCG. Default is 1e-2.</li>\n<li><strong>verbose</strong> (bool, optional):\nFlag to print details of the optimization. Default is False.</li>\n</ul>\n"}, {"fullname": "optimization.LinearSolvers.PCG.__init__", "modulename": "optimization.LinearSolvers", "qualname": "PCG.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "optimization.LinearSolvers.PCG.eval", "modulename": "optimization.LinearSolvers", "qualname": "PCG.eval", "kind": "function", "doc": "<p>Solve the linear system A * x = b using Preconditioned Conjugate Gradient (PCG) optimization.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (Callable):\nA function that represents the matrix-vector multiplication for matrix A.</li>\n<li><strong>M</strong> (Callable, optional):\npreconditioner (default is None)</li>\n<li><strong>b</strong> (torch.Tensor):\nThe right-hand side vector of the linear system.</li>\n<li><strong>x</strong> (torch.Tensor, optional):\nInitial guess for the solution. (default is None)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\noptimal value</li>\n<li><strong>res</strong> (float):\nresidual of system</li>\n<li><strong>it</strong> (int):\nnumber of iterations</li>\n<li><strong>itOpt</strong> (int):\noptimal iteration</li>\n<li><strong>resvec</strong> (list):\nlist of residuals at each iteration</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">M</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.LinearSolvers.BlockPCG", "modulename": "optimization.LinearSolvers", "qualname": "BlockPCG", "kind": "class", "doc": "<p>PCG solver for blkdiag(A1, \\ldots, An) * x = (b1, \\ldots, bn)</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>max_iter</strong> (int):\nMaximum number of PCG iterations.</li>\n<li><strong>tol</strong> (float):\nStopping tolerance for PCG.</li>\n<li><strong>verbose</strong> (bool):\nFlag to print details of the optimization.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_iter</strong> (int, optional):\nMaximum number of PCG iterations. Default is 10.</li>\n<li><strong>tol</strong> (float, optional):\nStopping tolerance for PCG. Default is 1e-2.</li>\n<li><strong>verbose</strong> (bool, optional):\nFlag to print details of the optimization. Default is False.</li>\n</ul>\n"}, {"fullname": "optimization.LinearSolvers.BlockPCG.__init__", "modulename": "optimization.LinearSolvers", "qualname": "BlockPCG.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "optimization.LinearSolvers.BlockPCG.eval", "modulename": "optimization.LinearSolvers", "qualname": "BlockPCG.eval", "kind": "function", "doc": "<p>Solve the linear system blkdiag(A1, \\ldots, An) * x = (b1, \\ldots, bn) using parallelized PCG.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (Callable):\nA function that represents the matrix-vector multiplication for matrix A.</li>\n<li><strong>b</strong> (torch.Tensor):\nThe right-hand side vector of the linear system.</li>\n<li><strong>M</strong> (Callable, optional):\nPreconditioner. (default is None)</li>\n<li><strong>x</strong> (torch.Tensor, optional):\nInitial guess for the solution. (default is None)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\noptimal value</li>\n<li><strong>res</strong> (float):\nresidual of system</li>\n<li><strong>it</strong> (int):\nnumber of iterations</li>\n<li><strong>itOpt</strong> (int):\noptimal iteration</li>\n<li><strong>resvec</strong> (list):\nlist of residuals at each iteration</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">M</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.OptimizationLogger", "modulename": "optimization.OptimizationLogger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "optimization.OptimizationLogger.OptimizationLogger", "modulename": "optimization.OptimizationLogger", "qualname": "OptimizationLogger", "kind": "class", "doc": "<p>A class for logging optimization iteration information and generating reports.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nFile path to the directory where log files and reports are saved.</li>\n<li><strong>verbose</strong> (boolean):\nFlag to print logs to standard output.</li>\n<li><strong>log_file</strong> (str):\nFile path of log file.</li>\n<li><strong>history</strong> (list):\nList to store iteration history.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str, optional):\nFile path to the directory where log files and reports are saved. Default is None.</li>\n<li><strong>verbose</strong> (boolean, optional):\nFlag to print logs to standard output. Default is False.</li>\n</ul>\n"}, {"fullname": "optimization.OptimizationLogger.OptimizationLogger.__init__", "modulename": "optimization.OptimizationLogger", "qualname": "OptimizationLogger.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "optimization.OptimizationLogger.OptimizationLogger.log_iteration", "modulename": "optimization.OptimizationLogger", "qualname": "OptimizationLogger.log_iteration", "kind": "function", "doc": "<p>Log iteration information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iteration_info</strong> (dict):\nDictionary containing iteration details.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iteration_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.OptimizationLogger.OptimizationLogger.log_message", "modulename": "optimization.OptimizationLogger", "qualname": "OptimizationLogger.log_message", "kind": "function", "doc": "<p>Log a message to the log file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong> (str):\nThe message to be logged.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.OptimizationLogger.OptimizationLogger.print_iteration", "modulename": "optimization.OptimizationLogger", "qualname": "OptimizationLogger.print_iteration", "kind": "function", "doc": "<p>Print the details of a specific iteration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong> (int):\nThe index of the iteration to be printed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "optimization.OptimizationLogger.OptimizationLogger.print_history", "modulename": "optimization.OptimizationLogger", "qualname": "OptimizationLogger.print_history", "kind": "function", "doc": "<p>Print the full optimization history.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();